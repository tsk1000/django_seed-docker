"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import sys
from pathlib import Path

# manage.py ファイルのディレクトリパス
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'SECRET_KEY'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# サーバが許容するサーバアドレス
ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

# Application definition
INSTALLED_APPS = [
    # my apps
    "sample.apps.SampleConfig",

    # DB参照などに使う admin app
    'django.contrib.admin',
    # 認証関係 app
    'django.contrib.auth',
    # モデル関係 app
    'django.contrib.contenttypes',
    # セッション関係 app
    'django.contrib.sessions',
    # メッセージ関係 app
    # 画面にメッセージを簡単に出せる
    'django.contrib.messages',
    # 静的ファイル管理 app
    'django.contrib.staticfiles',
]

# ミドルウェア
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# appを一か所にまとめて配置「apps」
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# 設定ファイルのパス
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # テンプレートを探す対象のフォルダリスト
        "DIRS": [os.path.join(BASE_DIR, 'apps/base/templates/common')],
        # プリケーションフォルダ配下を探すか否かのフラグ
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.postgresql',
         'NAME': 'mydb',
         'USER': 'postgres',
         'PASSWORD': 'postgres',
         'HOST': 'my-db',
         'PORT': '5432',
     }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
# パスワード設定時のバリデーションルール
AUTH_PASSWORD_VALIDATORS = [
    {
        # ユーザー名と似たパスワードチェック
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # パスワードの長さチェック
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        # よくあるパスワードになってないかチェック
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # 数値のみのパスワードになってないかチェック
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
# 言語設定
LANGUAGE_CODE = 'ja'
# 時間設定
TIME_ZONE = 'Asia/Tokyo'
# 言語
USE_I18N = True
# 日付フォーマット
USE_L10N = True
# 時間
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'
# debug or release で切替
if DEBUG == False:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ロギングの設定
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # 開発本番の切り替えフィルタ設定
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    # ログ出力フォーマットの設定
    "formatters": {
        "production": {
            "format": "%(asctime)s [%(levelname)s] %(process)d %(thread)d "
            "%(pathname)s:%(lineno)d %(message)s"
        },
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "%(asctime)s [%(levelname)s] %(message)s",
        },
    },
    # ハンドラの設定
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "D",
            "interval": 1,
            "backupCount": 10,
            "formatter": "production",
            "filename": os.path.join(BASE_DIR, "logs/app.log"),
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
    },
    # ロガーの設定
    "loggers": {
        # 自分で追加したアプリケーション全般のログを拾うロガー
        "": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": False,
        },
        # Django自身が出力するログ全般を拾うロガー
        "django": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
